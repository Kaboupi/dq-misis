x-airflow-common:
  &airflow-common
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__CORE__TEST_CONNECTION: 'Enabled'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/admin:/opt/airflow/admin
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    airflow-redis:
      condition: service_healthy
    airflow-postgres:
      condition: service_healthy

services:
  airflow-postgres:
    image: postgres:13
    container_name: ${PROJECT_NAME:-pipeline}-airflow-postgres
    hostname: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      af_network:

  airflow-redis:
    image: redis:7.2-bookworm
    container_name: ${PROJECT_NAME:-pipeline}-airflow-redis
    hostname: redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      af_network:

  airflow-webserver:
    <<: *airflow-common
    container_name: ${PROJECT_NAME:-pipeline}-airflow-webserver
    command: webserver
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      af_network:

  airflow-scheduler:
    <<: *airflow-common
    container_name: ${PROJECT_NAME:-pipeline}-airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      af_network:

  airflow-worker:
    <<: *airflow-common
    container_name: ${PROJECT_NAME:-pipeline}-airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      af_network:

  airflow-triggerer:
    <<: *airflow-common
    container_name: ${PROJECT_NAME:-pipeline}-airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      af_network:

  airflow-init:
    <<: *airflow-common
    container_name: ${PROJECT_NAME:-pipeline}-airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins,admin}
        airflow db migrate
        airflow connections import /sources/admin/connections/connections.yaml

        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
      AIRFLOW__CORE__TEST_CONNECTION: 'True'  # Включение тестирования подключений
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      af_network:

  airflow-cli:
    <<: *airflow-common
    container_name: ${PROJECT_NAME:-pipeline}-airflow-cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    networks:
      af_network:

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      af_network:

  ######################
  # Declaring services #
  ######################

  # DB POSTGRES SERVICE
  db-postgres:
    image: postgres:13.3
    container_name: ${PROJECT_NAME:-pipeline}-db-postgres
    hostname: db-postgres
    environment:
      POSTGRES_DB: postgres_db
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
    ports:
      - "5445:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./source/init_scripts/init_source.sql:/docker-entrypoint-initdb.d/init_source.sql:ro
      - ./source/source_data:/source_data:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_user -d postgres_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      af_network:
  
  # DQP SERVICE
  db-dqp:
    image: postgres:13.3
    container_name: ${PROJECT_NAME:-pipeline}-db-dqp
    hostname: db-dqp
    environment:
      POSTGRES_DB: dqp_db
      POSTGRES_USER: dqp_user
      POSTGRES_PASSWORD: dqp_password
    ports:
      - "5435:5432"
    volumes:
      - dqp-data:/var/lib/postgresql/data
      - ./source/init_scripts/init_dqp.sql:/docker-entrypoint-initdb.d/init_dqp.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dqp_user -d dqp_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      af_network:

  # DB CLICKHOUSE SERVICE
  db-clickhouse:
    image: clickhouse/clickhouse-server:24.9.3
    container_name: ${PROJECT_NAME:-pipeline}-db-clickhouse
    hostname: db-clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
      - "9440:9440"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./source/clickhouse:/etc/clickhouse-server
    networks:
      af_network:
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --no-verbose --tries=1 http://127.0.0.1:8123/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 1m

  # BI GRAFANA SERVICE
  bi-grafana:
    image: grafana/grafana-enterprise:latest
    container_name: ${PROJECT_NAME:-pipeline}-bi-grafana
    ports:
      - '3030:3000'
    environment:
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafanaadmin
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./source/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./source/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./source/grafana/dashboards:/etc/dashboards
    networks:
      af_network:
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -fsSL http://127.0.0.1:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 30s

  # OBJECT STORAGE MINIO SERVICE
  os-minio:
    image: minio/minio:latest
    container_name: ${PROJECT_NAME:-pipeline}-minio
    hostname: minio
    volumes:
      - minio-data:/data
    ports:
      - "9001:9001"
      - "9003:9000"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_DOMAIN: minio
    command: server /data --address ":9000" --console-address ":9001"
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -fsSL http://localhost:9000/minio/health/live || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 2
      start_period: 15s
    networks:
      af_network:

  # OBJECT STORAGE MINIO INIT
  os-minio-init:
    image: minio/mc
    container_name: ${PROJECT_NAME:-pipeline}-minio-init
    depends_on:
      os-minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set miniolink http://minio:9000 admin minioadmin;
      /usr/bin/mc mb miniolink/postgres-data;
      /usr/bin/mc policy set public miniolink/postgres-data;
      exit 0;
      "
    networks:
      af_network:

volumes:
  postgres-db-volume:
  postgres-data:
  dqp-data:
  minio-data:
  clickhouse-data:
  grafana-data:

networks:
  af_network:
    name: af_network